Question 15 : 
Le jeu fonctionne bien et respecte les consignes.
On en a même profité pour tester les fonctionnalités sur notre accessoire McDo et notre créature Ronald.
Voici la classe utilisée pour tester le jeu  : 

import java.awt.* ;
import javax.swing.* ;
import java.util.Scanner ;
import javax.imageio.ImageIO;
import java.io.*;

public class Question15 {
	public static void main (String [] args){ // Notre main de Jeu
		System.out.println("\n*************************** Début du main du Jeu ***************************\n") ;

		// Création du monde
		Monde monde = new Monde(12, 12) ;
		//System.out.println("Voici notre monde :\n" + monde.toString()) ;

		// Populons ce monde
		// Ajout de 6 créatures dans le monde **************************************
		Creature creature1 = new Creature() ;
		monde.ajouterItem(creature1) ;
		//System.out.println("Créature1 ajoutée :\n" + creature1.toString()) ;
		Creature creature2 = new Creature() ;
		monde.ajouterItem(creature2) ;
		//System.out.println("Créature2 ajoutée :\n" + creature2.toString()) ;
		Creature creature3 = new Creature() ;
		monde.ajouterItem(creature3) ;
		//System.out.println("Créature3 ajoutée :\n" + creature3.toString()) ;
		Creature creature4 = new Creature() ;
		monde.ajouterItem(creature4) ;
		//System.out.println("Créature4 ajoutée :\n" + creature4.toString()) ;
		Creature creature5 = new Creature() ;
		monde.ajouterItem(creature5) ;
		//System.out.println("Créature5 ajoutée :\n" + creature5.toString()) ;
		Creature creature6 = new Creature() ;
		monde.ajouterItem(creature6) ;
		//System.out.println("Créature6 ajoutée :\n" + creature6.toString()) ;
		//Creature ronald1 = (Creature) (new RonaldMcDonald());
		RonaldMcDonald ronald1 = new RonaldMcDonald();
		monde.ajouterItem(ronald1) ;

		// Ajout de 3 pommes dans le monde **************************************
		Pomme p1 = new Pomme() ;
		monde.ajouterItem(p1) ;
		//System.out.println("Pomme1 ajoutée :\n" + p1.toString()) ;
		Pomme p2 = new Pomme() ;
		monde.ajouterItem(p2) ;
		//System.out.println("Pomme2 ajoutée :\n" + p2.toString()) ;
		Pomme p3 = new Pomme() ;
		monde.ajouterItem(p3) ;
		//System.out.println("Pomme3 ajoutée :\n" + p3.toString()) ;

		// Ajout de BigMac dans le Monde **************************************
		BigMac b1 = new BigMac();
		monde.ajouterItem(b1);
		BigMac b2 = new BigMac();
		monde.ajouterItem(b2);
		BigMac b3 = new BigMac();
		monde.ajouterItem(b3);

		// Ajout de 3 sacs dans le monde **************************************
		Sac sac1 = new Sac() ;
		monde.ajouterItem(sac1) ;
		//System.out.println("sac1 ajouté :\n" + sac1.toString()) ;
		Sac sac2 = new Sac() ;
		monde.ajouterItem(sac2) ;
		//System.out.println("sac2 ajouté :\n" + sac2.toString()) ;
		Sac sac3 = new Sac() ;
		monde.ajouterItem(sac3) ;
		//System.out.println("sac3 ajouté :\n" + sac3.toString()) ;

		// Monde généré avec succès, affichage du monde
		//System.out.println("Voici le monde peuplé : " + monde.toString()) ;
		//System.out.println("Affichons ce monde : ") ;
		//monde.afficher() ;

		// Il est temps d'ajouter deux avatars représentant chacun un joueur humain
		Avatar joueur1 = new Avatar(monde) ;
		monde.ajouterItem(joueur1) ;
		//System.out.println("Ajout du premier avatar/joueur :\n" + joueur1.toString()) ;
		Avatar joueur2 = new Avatar(monde) ;
		monde.ajouterItem(joueur2) ;
		//System.out.println("Ajout du deuxième avatar/joueur :\n" + joueur2.toString()) ;

		// réaffichage du monde
		//System.out.println("Voici le monde peuplé : " + monde.toString()) ;
		//System.out.println("Affichons ce monde : ") ;
		//monde.afficher() ;

		// réalisation de 5 tours de jeu
		System.out.println("Monde : ") ; monde.afficher() ;
		System.out.println("joueur1 : " + joueur1) ;
		System.out.println("joueur2 : " + joueur2) ;
		System.out.println("\n\n\n") ;
		for(int tour = 1 ; tour < 4 ; tour ++){
			// Annonce du round
			System.out.println("*** Tour " + tour + " ***") ;
			// tour du joueur 1
			System.out.println("Action de " + joueur1.getNomPersonnage()) ;
			joueur1.seDeplacer() ;
			System.out.println("Maj j1 :" + joueur1) ;
			monde.afficher() ;
			// tour  du joueur 2
			System.out.println("Action de " + joueur2.getNomPersonnage()) ;
			joueur2.seDeplacer() ;
			System.out.println("Maj j2 :" + joueur2) ;
			monde.afficher() ;
		}
		System.out.println("Fin") ;
		// réaffichage du monde
		//System.out.println("Voici le monde peuplé : " + monde.toString()) ;
		//System.out.println("Affichons ce monde : ") ;
		//monde.afficher() ;


		// réaffichage des joueurs
		//System.out.println("premier avatar/joueur :\n" + joueur1.toString()) ;
		//System.out.println("deuxième avatar/joueur :\n" + joueur1.toString()) ;

		// Fin 5 tours, donc, il faut que chaque avatar réalise une course avec ses créatures
		System.out.println("\n\n\n*************************** Score Final ***************************\n") ;
		double j1 = joueur1.course() ;
		System.out.println("j1 = " + j1 + " kilometres") ;
		double j2 = joueur2.course() ;
		System.out.println("j2 = " + j2 + " kilometres") ;
		if (j1 == j2) {
			System.out.println("Match nul") ;
		}
		if (j1 > j2) {
			System.out.println("Joueur1 gagne !") ;
		}
		if (j1 < j2) {
			System.out.println("Joueur2 gagne !") ;
		}

		System.out.println("\nFin du main du jeu") ;

	}
}

Question 16 : 

On a un nouvel accessoire mangeable qui est le BigMac de chez MacDonalds.
Cet hamburger est caractérisé par un poids (varibale d'instance) qui varie selon le fait qu'il soit décrit comme étant bien gras, délicieux ou fat de ouf.
Comme le poids joue un rôle non négligeable sur la vitesse de la créature, sa vitesse varie en le mangeant.
Voci la classe en question : 

import java.awt.*;
import javax.swing.*;
import javax.imageio.ImageIO ; 
import java.io.* ;

public class BigMac extends Acc implements Mangeable {

  /* Attributs */
  private static final String[] TAB = new String[] {"Bien gras", "Delicieux", "Fat de ouf"} ;
  private static int pointeur = (-1) ; 
  private double poids ; // poids de la pomme en kg
  

  /* Constructeurs */
  public BigMac() {
    super("BigMac") ; // Appel au cosntructeur Acc(categorie)
	poids = Math.random() ; // Considère de base qu'il est Délicieux
	
	if (pointeur == 0){ // Bien gras
		poids += 1.0 ; 
	}
	
	if (pointeur == 2){ // Fat de ouf 
		poids += 2.0 ; 
	}
  }

  /* Méthodes */
  @Override
  public String toString(){
	if (pointeur == 2){
		pointeur = 0 ; 
	} else {
		pointeur ++ ; 
	}
    return ("BigMac : " + super.toString() + " " + TAB[pointeur]) ; // toString d'Acc

  }

  public double getPoids(){ // retourne le poids du bigMac
    return poids ;
  }
  
  public void dessiner(Graphics g, Monde m) {

	int tc = m.getTailleCase();
	int tc2 = tc/2;

	File bm;
	Image image;

	try {
		bm = new File("./images/bm.png");
		image = ImageIO.read(bm);
		g.drawImage(image, getX()*tc, getY()*tc+tc2, tc, tc-tc2, m); 
	    } catch (IOException e){
		System.out.println(e.getMessage());
	      }
  }

}

Question 17 :
Après le BigMac, voici notre cher RonaldMcDonald.
C'est une créature qui court plus vite si celle-ci possède dans son sac un (ou plusieurs) bigMac.
Plus le nombre de bigmacs qu'elle possède est grand, plus sa vitesse augmentera.
voici la classe : 
import java.awt.*;
import javax.swing.*;
import javax.imageio.ImageIO;
import java.io.*;

public class RonaldMcDonald extends Creature{
	/* Creation de la classe RonaldMcDonald qui est une créature qui court plus vite si celle-ci possède dans son sac un (ou plusieurs) bigMac */
	/* Attributs */
	private static int cptBigMac = 0;

	/* Constructeurs */
	public RonaldMcDonald (){
		super("RonaldMcDonald");
	}

	/* Methodes */
	@Override // je souhaite réécrire la methode getVitesse() de Creature
	public double getVitesse(){
	// retourne la vitesse à laquelle peut courir la créature
		Sac sacRonald = getLeSac(); // j'ai écris un accesseur getLeSac() dans Creature car leSac est private
		Acc temp;
		for(int i=0; i < sacRonald.size(); i++){ //size() est dans la classe Sac
			temp = sacRonald.obtenir(i); //obtenir() est dans la classe Sac
			if(temp.getCategorie() == "BigMac"){ //si le nom de l'accessoire est BigMac, j'incrémente mon compteur
				cptBigMac++;
			}
		}
		double v = (0.250d * super.getPoids()) - (sacRonald.getPoids()) + cptBigMac*2 ; // 1.0/4.0 = 0.250	//plus il mange de BigMac PLUS la vitesse est gde
		if (v < 0.0d){
			v = 0.0d ;
		}
		return v ;
	}

	public void dessiner(Graphics g, Monde m){

		int tc = m.getTailleCase();

		File Ronald;
		Image image;

		try {
			Ronald = new File("./images/Ronald.png");
			image = ImageIO.read(Ronald);
			g.drawImage(image, getX()*tc, getY()*tc, tc, tc, m); 
		} catch (IOException e){
		System.out.println(e.getMessage());
		}

	}
}

 
Question 18 : On n'a pas su comment faire

Question 19 : 
On a utilisé des images plutot que les dessins proposés.

Question 20 : 
La fenêtre graphique s'affiche et la pseudo animation fonctionne bien.
On a rajouté la possibilité de choisir le nom du joueur (avatar).
On a rajouté la possibilité de jouer en mode 1 joueur, 2 joueurs, 3 joueurs et 4 joueurs.

import java.awt.* ;
import javax.swing.* ;
import java.util.Scanner ; 
import javax.imageio.ImageIO;
import java.io.*;

public class Jeu {
	
	private static final int TAILLE_CASE = 80;
	private static final int NB_CASES = 10;
	private static final int NB_CREATURES = 8;

	public static void main(String[] args) throws InterruptedException {

		//Création fenêtre graphique et ses caractéristiques
		JFrame f = new JFrame();

		f.setLocationRelativeTo(null);
		f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

		//Création du monde en mode panneau
		Monde m = new Monde(NB_CASES, TAILLE_CASE);

		f.setContentPane(m); //Ajout du monde à la fenêtre
		f.pack(); //Adaptation de la fenêtre au panneau
		f.setVisible(true);

		Creature[] tabCreatures = new Creature[NB_CREATURES];
		for (int i = 0; i < NB_CREATURES; i++){
			tabCreatures[i] = new Creature(Noms.getNom());
		}


		BigMac a1 = new BigMac();
		Pomme p1 = new Pomme();
		Pomme p2 = new Pomme();
		Pomme c1 = new Pomme();
		Pomme c2 = new Pomme();
		BigMac b1 = new BigMac();
		BigMac b2 = new BigMac();
		BigMac r1 = new BigMac();
		Sac s1 = new Sac(5);
		Sac ct1 = new Sac();
		Pomme cb1 = new Pomme();
		
		m.ajouterItem(a1);
		m.ajouterItem(p1);
		m.ajouterItem(p2);
		m.ajouterItem(c1);
		m.ajouterItem(c2);
		m.ajouterItem(b1);
		m.ajouterItem(b2);
		m.ajouterItem(r1);
		m.ajouterItem(s1);
		m.ajouterItem(ct1);
		m.ajouterItem(cb1);

		int nbJoueurs;
		String[] tabNoms = new String[4];
		Avatar[] tabAvatars = new Avatar[4];

		Scanner scanner = new Scanner(System.in);
		System.out.println("|Créatures et Avatars : Le Jeu|\n\tMenu Principal\t");

		// Choix du nombre de joueurs.
		do{
			System.out.println("1-Tapez 1 pour lancer le mode 1 joueur\n2- Tapez 2 pour lancer le mode 2 joueurs\n3- Tapez 3 pour lancer le mode 3 joueurs\n4- Tapez 4 pour lancer le mode 4 joueurs");
			nbJoueurs = scanner.nextInt();
		} while (nbJoueurs < 1 || nbJoueurs > 4);

		
		for (int i = 0; i < nbJoueurs; i++){
			System.out.println("Nom du joueur numéro " + i + " : ");
			tabNoms[i] = scanner.next();
			tabAvatars[i] = new Avatar(tabNoms[i], m); 
		}

		m.repaint(); 

		int choice = 0 ; 
		for (int i = 0; i < 5; i++) {
			for (int j = 0; j < nbJoueurs; j++) {
				Thread.sleep(1000); 
				System.out.println("Tour " + i + "du joueur " + tabAvatars[j].getNomPersonnage() + " : ");
				choice = 0 ; 
				while (choice < 1 || choice > 2){
					System.out.println("1. Je me déplace\n2. Je rencontre mes voisins") ; 
					choice = scanner.nextInt() ; 
				}
				if(choice == 1){
					tabAvatars[j].seDeplacer();
				} else {
					tabAvatars[j].rencontrerVoisins() ; 
				}
				m.repaint(); 
			}
		}

		double max = tabAvatars[0].course() ; 
		Avatar gagnant = null;
	
		for (int i = 1; i < nbJoueurs; i++){
			double distance = tabAvatars[i].course();
			if (distance > max){
				gagnant = tabAvatars[i]; 
				max = distance;
			}
			System.out.println("Score de " + tabAvatars[i].getNomPersonnage() + " est " + distance + " Km");
		}

		if (gagnant != null){
			System.out.println(gagnant.getNomPersonnage() + " WINS");
		} else {
			System.out.println("Match nul");
		}

		System.exit(0);

	}
